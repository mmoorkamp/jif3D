6.  A SPARSE MATRIX EXAMPLE

   To illustrate the sparse matrix routines, consider the problem of
solving Poisson's equation on a square using finite differences, and
incomplete Cholesky factorisation.  The actual equations to solve are

	u_{i,j+1} + u_{i,j-1} + u_{i+1,j} + u_{i-1,j} - 4*u_{i,j} =
	   h^2*f(x_i,y_j),  for  i,j=1,...,N   

where u_{0,j} = u_{i,0} = u_{N+1,j} = u_{i,N+1} = 0 for i,j=1,...,N and h
is the common distance between grid points.

   The first task is to set up the matrix describing this system of linear
equations.  The next is to set up the right-hand side.  The third is to
form the incomplete Cholesky factorisation of this matrix, and finally to
use the sparse matrix conjugate gradient routine with the incomplete
Cholesky factorisation as preconditioner.

   Setting up the matrix and right-hand side can be done by the following
code:


  #define N 100
  #define index(i,j) (N*((i)-1)+(j)-1)
  ......
  A = sp_get(N*N,N*N,5);
  b = v_get(N*N);
  h = 1.0/(N+1);      /* for a unit square */
  ......

  for ( i = 1; i <= N; i++ )
    for ( j = 1; j <= N; j++ )
    {
        if ( i < N )
            sp_set_val(A,index(i,j),index(i+1,j),-1.0);
        if ( i > 1 )
            sp_set_val(A,index(i,j),index(i-1,j),-1.0);
        if ( j < N )
            sp_set_val(A,index(i,j),index(i,j+1),-1.0);
        if ( j > 1 )
            sp_set_val(A,index(i,j),index(i,j-1),-1.0);
        sp_set_val(A,index(i,j),index(i,j),4.0);
        b->ve[index(i,j)] = -h*h*f(h*i,h*j);
    }

   Once the matrix and right-hand side are set up, the next task is to
compute the sparse incomplete Cholesky factorisation of A.  This must be
done in a different matrix, so A must be copied.

  LLT = sp_copy(A);
  spICHfactor(LLT);

Now when that is done, the remainder is easy:

  out = v_get(A->m);
  ......
  iter_spcg(A,LLT,b,1e-6,out,1000,&num_steps);
  printf("Number of iterations = %d\n",num_steps);
  ......

and the output can be used in whatever way desired.

   For graphical output of the results, the solution vector can be copied
into a square matrix, which is then saved in MATLAB format using m_save(),
and graphical output can be produced by MATLAB.

