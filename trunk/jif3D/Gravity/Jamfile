import testing ; 
lib gravity : ThreeDGravityModel.cpp DepthWeighting.cpp
              GravityBackground.cpp BasicGravElements.cpp
              ScalarOMPGravityImp.cpp  TensorOMPGravityImp.cpp
              GravityInterface.cpp   ReadWriteGravityData.cpp
                 ../Global//global ..//boost_filesystem ..//boost_system ../ModelBase//modelbase ../Inversion//lininv
              : <gpu>on:<source>TensorCudaGravityImp.cpp 
                <gpu>on:<source>ScalarCudaGravityImp.cpp
                <gpu>on:<source>..//cudart
                <gpu>on:<source>gravcuda.cu ;
               
                    
alias core :  ../ModelBase//modelbase ../Global//global ..//netcdf_c++ ..//netcdf  ..//boost_filesystem  ..//boost_program_options ..//boost_system ;

unit-test Model_test : test_ThreeDGravityModel.cpp gravity core  ;
unit-test scalar_test : test_ScalarCalculation.cpp gravity core  ;
unit-test tensor_test : test_TensorCalculation.cpp gravity core  ;
unit-test gravity_objective_test : test_GravityObjective.cpp gravity core ../Inversion//inversion  ;
unit-test transform_test : test_transforms.cpp  gravity core ..//vecopt  ;
unit-test R_test : test_Rinterface.cpp gravity core ..//vecopt  ;
# unit-test weighting_test : test_weighting.cpp DepthWeighting.cpp  gravity  ../Inversion//inversion core   ;
unit-test readwrite_test : test_readwritedata.cpp gravity  ../Inversion//inversion core   ;

exe gravforward : gravforward.cpp gravity  core ;
exe gravgrid : gravgrid.cpp gravity  core  ;
exe gravinv : gravinv.cpp  ../Inversion/LinearInversion.cpp ../Inversion/MatrixTools.cpp gravity  core ../Inversion//inversion
              ..//vecopt : <lapack>on  ;
exe gravsens : gravsens.cpp gravity  core ../Inversion//inversion ../Inversion//lininv
              ..//vecopt :  <lapack>off:<build>no ;              
exe gravnoise : gravnoise.cpp gravity   core ;

exe makegravmesh : makegravmesh.cpp gravity  core  ;
