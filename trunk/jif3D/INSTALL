GETTING jif3D

Currently the code is only available through the subversion version control system (https://subversion.apache.org/) which can be installed easily on most Linux distributions (e.g. package subversion on Ubuntu). The command to get the code is

svn checkout https://svn.code.sf.net/p/jif3d/jif3dsvn/trunk/jif3D jif3d

This should create a directory jif3d with all source files in it.
If you want to update to the latest version at a later point, go to the main jif3d directory and type

svn up


PREPARATION

Make sure you have the following libraries installed and in the default search path for your 
compiler. Under linux you might be able to install them as part of your distribution. One of
the things still missing is some sort of autoconfiguration that enables and disables features
with the availability of libraries. Some parts of the compilation can be disabled though (see below).

You need the following libraries:

* Boost 1.70 or later from www.boost.org, in case of doubt use the latest version (package libboost-dev on Ubuntu)
* netcdf from http://www.unidata.ucar.edu/software/netcdf/ (package libnetcdf-dev)
* netcdf-4 C++ from https://www.unidata.ucar.edu/downloads/netcdf/ (package libnetcdf-c++4-dev)

You can either download these packages from source and follow the compilation instructions or on
Ubuntu these packages are part of the distribution (others might have some or all of them). Just make sure you install the -dev versions as
well, as these contain the necessary header files. 

Optional libraries include 
* The boost bindings for Lapack and Atlas from 
  news.tiker.net/filebrowser/software/boost-bindings (rarely used now)
* Nvidia's CUDA version 4.0 or higher from https://developer.nvidia.com/cuda-toolkit, for
gravity gpu computations
By default the usage of these libraries is turned off. You can turn on gpu calculations for gravity and magnetic by setting <gpu>on in the Jamroot file.


We are using boost-build as a build system. It is included in any distribution of boost, can be
installed through the package manager on ubuntu (libboost-tools-dev) or can be obtained separately (https://github.com/boostorg/build). 
If you use the version included with the downloaded boost package, you might to have a look at the boost-build.jam file and adjust the path there
to the location where you downloaded boost.



LOCATING LIBRARIES AND INCLUDES

You will have to edit the file Jamroot in the jif3D root directory to reflect the location of libraries
on your system. Under certain circumstance you might have to edit the compiler flags,
however this should usually not be necessary.
In the future we will hopefully be able to make this more convenient.

The main things to look out for are setting

BOOST_LIB_PATH, NETCDF_LIB_PATH, CUDA_LIB_PATH

to the paths where these libraries are located (CUDA is optional). You might also have to add lines similar to
	<include>/media/bmw/Grimsel/netcdf/include
to show where the header files are located if they are not in a standard location. You can just add as many as needed in the project section.

COMPILATION

If all goes well, you simply have to type "b2 release" or "bjam release" (on older systems) if you have installed boost
build through the package manager or something like "/usr/local/bin/b2 release" if you are using a custom installation
and the compilation will start (it works for me :-) ). We have successfully compiled this library and the programs 
with g++, clang and intel c++ on linux. Note that compiling without the release option will create debug program
which are good for finding problems but can be orders of magnitude slower.

Each compilation run executes a number of automatic tests that check for correctness
of program behaviour. A few tests occasionally fail randomly as I have not checked for
some rare pathological cases. Usually running the compilation again should fix this.
If failures in the tests persist, let me know and we will look into it.


FINISH

There will be a bin directory under the main jif3D directory where the most used executables can be found.
In addtion, some of the compiled executable are scattered in different sub-directories 
created by the build system. The main joint inversion executable will be placed
in a sub-directory of Joint/bin other tools will be in the bin directories of
the MT, Gravity and Tomo directories. The Hacks directory contains various
useful tools, however they have been written with specific problems in mind
and might not work under all circumstances. 

You can build some documentation using doxygen by typing

doxygen Doxyfile.web (for linked html pages) or
doxygen Doxyfile.manual (for a pdf manual)

The style of this documentation is currently aimed at C++ developers. 
A more detailed user manual is in preparation. 

A good place to start at the moment is to have a look at the jupyter notebooks in the Tutorials directory.
These will guide you through converting gravity and magnetic data and performing individual and joint inversions
with these datasets.

Have fun
